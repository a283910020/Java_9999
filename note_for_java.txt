#############################################
string 类

== 比的是地址 ==> object == object 一定是false


##########################################################################################
##########################################################################################
StringBuffer / StringBuilder

String += str
StringBuffer.append(str)
StringBuilder.append(str)

StringBuilder为StringBuffer的升级版，最快
但StringBuilder不是线程安全的，不能同步访问
StringBuffer为String的1000倍以上

StringBuffer比较
StringBuffer str1 = new StringBuffer("hello");
StringBuffer str2 = new StringBuffer("hello");

str1.equal(str2) >>> false
str1.toString().equal(str2.toString()) >>> true

StringBuffer {append reverse insert delete replace set}
StringBuffer.setLength(0)  清空

##########################################################################################
##########################################################################################
继承和多态

使用super关键字调用父类方法
执行时先父类再子类
构造方法不可以继承
java里只能继承一个父类
父类私有属性子类不能直接访问

子类中 control + o ==> @override
override toString类
==> System.out.println("new method of move");
==> 相当于python __str__(self)

抽象类 abstract 不可以被实例化（new）
抽象类总结规定
1. 抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。
2. 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。
3. 抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。
4. 构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。
5. 抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。
##########################################################################################
##########################################################################################
static ***



